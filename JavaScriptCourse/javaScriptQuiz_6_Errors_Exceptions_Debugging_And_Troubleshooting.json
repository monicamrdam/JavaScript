{
    "questions":[
        { 
            "__comment": "1",
           "question": "Which of the following is a syntax error?",
           "answers":[
             {"option": ".", "answer":""},
             {"option": ".", "answer":""},
             {"option": ".", "answer":""},
             {"option": ".", "answer":""}
           ]
        },
        { 
           "__comment": "2",
            "question": "Analyze the code below: 'let x=10'; console.log(x);. What exception will be thrown as a result of its execution attempt? ",
           "answers":[
             {"option": "", "answer":""},
             {"option": "", "answer":""},
             {"option": "", "answer":""},
             {"option": "", "answer":""}
           ]
        },
        { 
           "__comment": "3",
           "question": " Analyze the following code: const x=10; onsole.log(x); x+=10;. What exception will be thrown as a result of its execution attempt?",
           "answers":[
             {"option": "", "answer":""},
             {"option": "", "answer":""}, 
             {"option": "", "answer":""},
             {"option": "", "answer":""}
           ]
        },
        { 
           "__comment": "4",
            "question": "Analyze the following code: let x 10; console.log(x);. What exception will be thrown as a result of its execution attempt?",
           "answers":[
             {"option": "", "answer":""},
             {"option": "", "answer":""},
             {"option": "", "answer":""},
             {"option": "", "answer":""}
           ]
        },
        { 
           "__comment": "5",
           "question": "Where can we finde in the debugger the information about the currently called functions in our program?:",
           "answers":[
             {"option": ".", "answer":""},
             {"option": ".", "answer":""},
             {"option": ".", "answer":""},
             {"option": ".", "answer":""}
           ]
        },
        { 
           "__comment": "6",
           "question": "Analyze the following code: let x=10; ocnsole.log(x);. What exception will be thrown as a result of its execution attempt? ",
           "answers":[
             {"option": "", "answer":""},
             {"option": "", "answer":""},
             {"option": "", "answer":""},
             {"option": "", "answer":""}
           ]
        },
        { 
           "__comment": "7",
            "question": "Analyze the following code: try{ocnsole.log('start');}catch (error){console.log('error');} console.log ('end');. What will happen as a result of its execution?",
           "answers":[
             {"option": "", "answer":""},
             {"option": "", "answer":""},
             {"option": "", "answer":""} ,
             {"option": "", "answer":""}
           ]
        },
        { 
           "__comment": "8" ,
           "question": "Review the following code: let x =10; function test (x){console.log (x);} test (20);. What will be displayed in the console as a result of its execution?",
           "answers":[
             {"option": "Nothing will show up.", "answer":"false"},
             {"option": "20", "answer":"true"},
             {"option": "x", "answer":"false"},
             {"option": "10", "answer":"false"}
           ]
        },
        { 
           "__comment": "9",
           "question": "The code snippet: function test(){} is: ",
           "answers":[
             {"option": "The declaration of an empty test function.", "answer":"true"},
             {"option": "The call of the test funcion.", "answer":"false"},
             {"option": "Incorrect, as the code is wrong and does not mean anything.", "answer":"false"},
             {"option": "The declaration fo the test variable in which the values returned by the completed function will be stored.", "answer":"false"}
           ]
        },
        { 
           "__comment": "10",
           "question": "We define a function using the following function expression: let sum = function (a,b) {return (a + b);}. What could the definition of the corresponding arrow function look like?" ,
           "answers":[
             {"option": "let sum = function (a , b) => {return(a + b);};", "answer":"false"},
             {"option": "let sum = (a , b) => a + b;", "answer":""},
             {"option": "let sum = (a , b) => {a + b;};", "answer":"false"},
             {"option": "let sum = (a , b) > a + b;", "answer":""}
           ]
        },
        { 
           "__comment": "11",
            "question": "If the function is to return some calculated value on completion, we use the following keyword to do so:",
           "answers":[
             {"option": "ret;", "answer":"false"},
             {"option": "yield;", "answer":"false"},
             {"option": "return;", "answer":"true"},
             {"option": "function;", "answer":"true"}
           ]
        },
        { 
           "__comment": "12",
           "question": "We define a function using the following function expression: let sum = function (a,b) {return (a + b);}. What could the definition of the corresponding arrow function look like?" ,
           "answers":[
             {"option": "let sum = function (a , b) => {return(a + b);};", "answer":"false"},
             {"option": "let sum = (a , b) => a + b;", "answer":""},
             {"option": "let sum = (a , b) => {a + b;};", "answer":"false"},
             {"option": "let sum = (a , b) > a + b;", "answer":""}
           ]
        },
        { 
           "__comment": "13",
           "question": "We define a function using the following function expression: let sum = function (a,b) {return (a + b);}. What could the definition of the corresponding arrow function look like?" ,
           "answers":[
             {"option": "let sum = function (a , b) => {return(a + b);};", "answer":"false"},
             {"option": "let sum = (a , b) => a + b;", "answer":""},
             {"option": "let sum = (a , b) => {a + b;};", "answer":"false"},
             {"option": "let sum = (a , b) > a + b;", "answer":""}
           ]
        },
        { 
           "__comment": "14",
           "question": "We define a function using the following function expression: let sum = function (a,b) {return (a + b);}. What could the definition of the corresponding arrow function look like?" ,
           "answers":[
             {"option": "let sum = function (a , b) => {return(a + b);};", "answer":"false"},
             {"option": "let sum = (a , b) => a + b;", "answer":""},
             {"option": "let sum = (a , b) => {a + b;};", "answer":"false"},
             {"option": "let sum = (a , b) > a + b;", "answer":""}
           ]
        }
        
    ]
}
